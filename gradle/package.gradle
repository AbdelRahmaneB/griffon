/*
 * Copyright 2010-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

ext.distBinSpec = copySpec {
    from('.') {
        include 'README.md'
        include 'INSTALL'
        include 'LICENSE'
    }
    from('src/dist') {
        exclude 'bin'
        exclude 'samples'
        exclude 'media'
        filter(ReplaceTokens, tokens: ['griffon.version': version, 'groovy.version': groovyVersion])
    }
    from('src/dist/bin') {
        into 'bin'
        filter(ReplaceTokens, tokens: ['griffon.version': version, 'groovy.version': groovyVersion])
        fileMode = 0755
    }
    from('src/dist/media') {
        into 'media'
    }
    from('src/dist/samples') {
        into 'samples'
        exclude '**/*.groovy'
        exclude '**/*.java'
        exclude '**/*.properties'
        exclude '**/*.xml'
        exclude '**/*.txt'
        exclude '**/html'
        exclude '**/*.md'
    }
    from('src/dist/samples') {
        into 'samples'
        include '**/*.groovy'
        include '**/*.java'
        include '**/*.properties'
        include '**/*.xml'
        include '**/*.txt'
        include '**/html'
        include '**/*.md'
        filter(ReplaceTokens, tokens: ['griffon.version': version, 'groovy.version': groovyVersion])
    }
    from(project(':griffon-guide').file('src/griffon')) {
        into 'src/griffon'
        filter(ReplaceTokens, tokens: ['griffon.version': version, 'groovy.version': groovyVersion])
    }
    into('lib') {
        from(project(':griffon-cli').configurations.runtime) {
            exclude 'griffon*'
        }
    }
    into('lib/shell') {
        from((project(':griffon-shell').configurations.runtime - project(':griffon-cli').configurations.runtime)) {
            exclude 'griffon*'
        }
    }

    ['rt', 'cli', 'scripts', 'resources', 'shell'].each { subproj ->
        from(project(':griffon-' + subproj).jar.outputs.files) {
            into('dist')
        }
    }

    into('scripts') {
        from(project(":griffon-scripts").sourceSets.main.allSource)
    }

    into('doc') {
        from(project(':griffon-guide').jarApi.outputs.files)
        from(project(':griffon-guide').jarSource.outputs.files)
        from(project(':griffon-guide').jarSourceHtml.outputs.files)
    }
    into('doc') {
        from('src/dist/doc')
        filter(ReplaceTokens, tokens: ['griffon.version': version, 'groovy.version': groovyVersion])
    }

    into('guide') {
        from(project(':griffon-guide').buildGuide.outputs.files)
    }
}

task zipBinary(type: Zip, dependsOn: ':griffon-guide:dist') {
    description = "Zips the binary distribution."
    classifier = 'bin'
    into "griffon-$version"
    with distBinSpec
}

task tarBinary(type: Tar) {
    description = "Tars the binary distribution."
    classifier = 'bin'
    into "griffon-$version"
    with distBinSpec
    compression = Compression.GZIP
}

ext.distSourceSpec = copySpec {
    from('.') {
        exclude 'build'
        exclude '.git*'
        exclude 'clover.license'
        exclude '.idea'
        exclude '.clover'
        exclude '.gradle'
        exclude 'buildSrc/build'
        exclude 'buildSrc/.gradle'
        exclude 'buildSrc/.idea'
        exclude 'subprojects/griffon-*/build'
        exclude 'subprojects/griffon-*/.gradle'
        exclude 'subprojects/griffon-*/.idea'
        exclude 'subprojects/griffon-*/.clover'
        exclude 'subprojects/griffon-*/*.ipr'
        exclude 'subprojects/griffon-*/*.iml'
        exclude 'subprojects/griffon-*/*.iws'
        exclude '**/cobertura.ser'
        exclude '*.ipr'
        exclude '*.iws'
        exclude '*.iml'
        exclude 'out'
    }
}

task zipSource(type: Zip) {
    description = "Zips the source distribution."
    with distSourceSpec
    classifier = 'src'
    into "griffon-$version"
}

task tarSource(type: Tar) {
    description = "Tars the source distribution."
    with distSourceSpec
    classifier = 'src'
    into "griffon-$version"
    compression = Compression.GZIP
}

ext.griffonHomeDir = System.getProperty('griffon.home') ?: System.env['GRIFFON_HOME']

task checkGriffonHome << {
    griffonHomeDir = System.getProperty('griffon.home') ?: System.env['GRIFFON_HOME']
    assert griffonHomeDir: 'You must define a value for $GRIFFON_HOME first!'
    println "===> \$GRIFFON_HOME is set to $griffonHomeDir"
}

task installBinary(type: Sync, dependsOn: checkGriffonHome) {
    description = 'Installs the binary distribution at $GRIFFON_HOME.'
    destinationDir = griffonHomeDir as File
    with distBinSpec
    doLast {
        ant.chmod(dir: "${griffonHomeDir}/bin", excludes: '*.bat', perm: 'ugo+x')
    }
}
