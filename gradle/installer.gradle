import org.apache.tools.ant.filters.ReplaceTokens

task prepareIzpack(type: Copy) {
    dependsOn { [distBinary, distSource] }

    destinationDir = "$buildDir/assemble/izpack" as File
    from('installer/izpack/resources') {
        into 'resources'
        filter(ReplaceTokens, tokens: ['griffon.version': version])
    }
    from("$buildDir/distributions/binary") {
        into 'binary'
    }
    from("$buildDir/distributions/source") {
        into 'source'
    }
}

task(izpack) << {
    description = "Creates an IzPack based installer for both binary and source distributions."
    inputs.dir "$buildDir/assemble/izpack" as File
    outputs.files "$buildDir/distributions/griffon-${version}-installer.jar"

    ant.taskdef(name: 'izpack',
                classpath: fileTree(dir: file('installer/izpack/lib'), includes: ['*.jar']).asPath,
                classname: 'com.izforge.izpack.ant.IzPackTask')

    ant.property(name: 'app.group',   value: 'Griffon')
    ant.property(name: 'app.name',    value: 'griffon')
    ant.property(name: 'app.title',   value: 'Griffon')
    ant.property(name: 'app.version', value: version)
    ant.property(name: 'app.subpath', value: "Griffon-$version")

    ant.izpack(basedir: "$buildDir/assemble/izpack",
               output: "$buildDir/distributions/griffon-${version}-installer.jar",
               compression: 'deflate',
               compressionlevel: '9') {
        config('''
<installation version="1.0">
  <variables>
    <variable name="appGroup" value="@{app.group}"/>
    <variable name="appTitle" value="@{app.title}"/>
    <variable name="appSubPath" value="@{app.subpath}"/>
    <variable name="appVersion" value="@{app.version}"/>
    <!-- pre-select desktop shortcut checkbox -->
    <variable name="DesktopShortcutCheckboxEnabled" value="true" />
  </variables>
  <native type="izpack" name="ShellLink.dll"/>
  <native type="3rdparty" name="COIOSHelper.dll" stage="both">
    <os family="windows"/>
  </native>
  <info>
    <javaversion>1.5</javaversion>
    <appname>@{app.title}</appname>
    <appsubpath>@{app.subpath}</appsubpath>
    <appversion>@{app.version}</appversion>

    <!-- following appears in HelloPanel -->
    <authors>
      <author name="the Griffon team" email="dev@griffon.codehaus.org"/>
    </authors>
    <url>http://griffon.codehaus.org</url>
  </info>

  <guiprefs width="800" height="600" resizable="yes">
    <modifier key="allXGap" value="5"/>
    <modifier key="allYGap" value="5"/>
    <modifier key="paragraphYGap" value="15"/>
    <modifier key="useHeadingPanel" value="yes"/>
    <modifier key="headingLineCount" value="1"/>
    <modifier key="headingFontSize" value="2"/>
    <modifier key="headingBackgroundColor" value="0x00ffffff"/>
    <modifier key="headingPanelCounter" value="text"/>
    <modifier key="headingPanelCounterPos" value="inHeading"/>
    <laf name="metouia">
       <os family="unix" />
    </laf>
  </guiprefs>

  <variables>
    <variable name="DesktopShortcutCheckboxEnabled" value="true"/>
    <variable name="ApplicationShortcutPath" value="ApplicationShortcuts"/>
  </variables>

  <locale>
    <langpack iso3="eng"/>
    <langpack iso3="deu"/>
    <langpack iso3="fra"/>
    <langpack iso3="jpn"/>
    <langpack iso3="ita"/>
    <langpack iso3="por"/>
    <langpack iso3="rus"/>
    <langpack iso3="spa"/>
  </locale>

  <resources>
    <res id="Heading.image" src="resources/griffon-logo.png" />
    <res id="groovy.logo" src="resources/groovy-logo.png" />
    <res id="grails.logo" src="resources/grails-logo.png" />
    <res id="griffon.logo" src="resources/griffon-logo.png" />
    <res id="griffon.splash" src="resources/griffon-splash.png" />
    <res id="HTMLLicencePanel.licence" src="resources/asl2.html" />

    <!-- FIXME: parse=yes results in a blank panel -->
    <res id="HTMLInfoPanel.info" src="resources/README-Griffon.html" parse="no" />
    <res id="TargetPanel.dir.unix" src="resources/target_unix.txt" parse="yes" />
    <res id="Win_NT_shortcutSpec.xml" src="resources/winShortcutSpec.xml" />
    <res id="Unix_shortcutSpec.xml" src="resources/unixShortcutSpec.xml"/>
    <res id="shortcutSpec.xml" src="resources/emptyShortcutSpec.xml" />
    <res id="ProcessPanel.Spec.xml" src="resources/processSpec.xml" />
<!--
    <res id="installer.langsel.img" src="resources/groovy-splash.png" />
-->
    <res id="RegistrySpec.xml" src="resources/RegistrySpec.xml" />
  </resources>

  <native type="izpack" name="ShellLink.dll"/>

  <panels>
    <panel classname="HelloPanel"/>
    <panel classname="HTMLInfoPanel"/>
    <panel classname="HTMLLicencePanel"/>
    <panel classname="TargetPanel" />
    <panel classname="PacksPanel"/>
    <panel classname="SummaryPanel"/>
    <panel classname="InstallPanel"/>
    <panel classname="ProcessPanel"/>
    <panel classname="ShortcutPanel" />
    <panel classname="FinishPanel"/>
  </panels>

  <listeners>
    <listener installer="SummaryLoggerInstallerListener"/>
    <listener installer="RegistryInstallerListener"
              uninstaller="RegistryUninstallerListener">
      <os family="windows"/>
    </listener>
  </listeners>

  <packs>
    <pack name="Griffon binary" required="yes">
      <description>Griffon binary installation.</description>

      <fileset dir="binary"
         targetdir="$INSTALL_PATH">
      </fileset>

      <!--
      <file src="resources/README-Griffon.html" targetdir="$INSTALL_PATH" />
      <parsable targetfile="$INSTALL_PATH/README-Griffon.html" />
      -->

      <file src="resources/pre-uninstall.bat" targetdir="$INSTALL_PATH/Uninstaller" os="windows" />
      <parsable targetfile="$INSTALL_PATH/Uninstaller/pre-uninstall.bat" os="windows" />
      <executable targetfile="$INSTALL_PATH/Uninstaller/pre-uninstall.bat" os="windows" stage="uninstall" />

      <executable targetfile="$INSTALL_PATH/bin/griffon" os="unix" />
      <executable targetfile="$INSTALL_PATH/bin/startGriffon" os="unix"/>
    </pack>

    <pack name="Griffon source" required="no">
      <description>Griffon source installation.</description>

      <fileset dir="source"
        targetdir="$INSTALL_PATH/source">
      </fileset>
    </pack>
  </packs>

</installation>''')
    }
}

tasks.izpack.dependsOn prepareIzpack

task rpm(dependsOn: [distBinary, zipSource]) << {
    def rpmDir = "$buildDir/assemble/rpm" as File

    description = "Creates an RPM package from the binary distribution."
    inputs.dir rpmDir
    outputs.files "$buildDir/distributions/griffon-${version.replace('-','_')}-1.noarch.rpm"

    mkdir("${rpmDir}/BUILD")
    mkdir("${rpmDir}/SOURCES")
    mkdir("${rpmDir}/SPECS")
    mkdir("${rpmDir}/SRPMS")
    mkdir("${rpmDir}/RPMS/noarch")

    copy {
        from 'installer/rpm'
        into "$rpmDir/SPECS"
        include '*.spec'
        filter(ReplaceTokens, tokens: ['griffon.version': version, 'griffon.version.rpm': version.replace('-','_')])
    }

    copy {
        from("$buildDir/distributions/binary")
        into "$rpmDir/BUILD"
    }
    copy {
        from("$buildDir/distributions")
        into "$rpmDir/SOURCES"
        include '*-src.zip'
    }

    ant.rpm(specFile: 'griffon.spec',
            topDir: rpmDir,
            cleanBuildDir: true,
            failOnError: true)
    copy {
        from "$rmpDir/RPMS/noarch/"
        into "$buildDir/distributions"
        include '*.rpm'
    }
}

task dmg(dependsOn: [distBinary]) << {
    def destinationDir = "$buildDir/distributions" as File
    def dmgDir = "$buildDir/assemble/dmg" as File

    description = "Creates a DMG package from the binary distribution."
    inputs.dir "$buildDir/distributions/binary"
    outputs.files "$buildDir/distributions/griffon-${version}-bin.dmg"

    copy {
        from("$buildDir/distributions/binary")
        into "$dmgDir/griffon-${version}"
    }

    ant.exec(executable: 'hdiutil') {
        arg(line: "create -srcfolder $dmgDir $buildDir/distributions//griffon-${version}-bin.dmg")
    }
}

task deb(dependsOn: [distBinary]) << {
    def destinationDir = "$buildDir/assemble/deb" as File
    def debDir = project.file('installer/deb')

    description = "Creates a Debian package from the binary distribution."
    inputs.dir "$buildDir/distributions/binary"
    outputs.file "$buildDir/distributions/griffon-${version}-1_all.deb"

    ant.taskdef(resource: 'ant_deb_task.properties',
                classpath: fileTree(dir: debDir, includes: ['*.jar']).asPath)

    mkdir("$destinationDir/bin")
    mkdir("$destinationDir/griffon")
    copy {
        from "$buildDir/distributions/binary"
        into destinationDir
        exclude '**/*.bat'
    }

    ant.deb(todir: "$buildDir/distributions",
            'package': 'griffon',
            section: 'contrib/devel',
            depends: 'groovy',
            postinst: "$debDir/postinst",
            prerm: "$debDir/prerm") {
        version(upstream: version)
        maintainer(name: 'Griffon Team',
                   email: 'dev@griffon.codehaus.org')
        description(synopsis: 'Grails-like framework for desktop Java applications', '''
Griffon is a Grails inspired application framework for developing desktop applications in Groovy
Home page: http://griffon.codehaus.org/
''')
        tarfileset(dir: destinationDir, prefix: 'usr/share/griffon')
        tarfileset(dir: "$destinationDir/bin", prefix: 'usr/share/griffon', filemode: '755')
    }
}
