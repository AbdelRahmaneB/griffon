h1. create-mvc 

h2. Purpose

The @create-mvc@ command will create a new MVC triad and configure it at @Application.groovy@. It will also create a test case for its controller.

h2. Examples

bc.
griffon create-mvc foo

h2. Description

MVC groups are the basis for Griffon's MVC implementation. Refer to the [MVC Pattern Overview|guide:mvcpattern] to know more about MVC groups and their features. Calling @griffon create-mvc foo@ results in the following files being created

bc.
griffon-app/controllers/FooController.groovy
griffon-app/models/FooModel.groovy
griffon-app/views/FooView.groovy
test/integration/FooTests.groovy

@Application.groovy@ will be updated with a new group definition

bc.
mvcGroups {
    // MVC Group for "foo"
    'foo' {
        model      = 'foo.FooModel'
        view       = 'foo.FooView'
        controller = 'foo.FooController'
    }
    ...
}

Usage:
bc.
griffon create-mvc \[name\]

Arguments
* @archetype@ - The name of an archetype, defaults to 'default'
* @model@ - The name of the model template, defaults to 'Model'
* @view@ - The name of the view template, defaults to 'View'
* @controller@ - The name of the controller template, defaults to 'Controller'
* @group@ - The name of the common template prefix for Model, View and Controller. Can be overriden by individual members
* @integrationTests@ - The name of the integration test template, defaults to 'IntegrationTests'
* @fileType@ - The file type of each artifact, i.e, groovy|java|etc
* @skipModel@ - Skips generating a model member if set to true
* @skipView@ - Skips generating a view member if set to true
* @skipController@ - Skips generating a controller member if set to true
* @withModel@ - Sets the model member to the specified full qualified class name
* @withView@ - Sets the view member to the specified full qualified class name
* @withController@ - Sets the controller member to the specified full qualified class name

More Examples:

bc.
griffon create-mvc foo -group=Custom

Creates a new group definition where MVC member templates are assumed to be @CustomModel@, @CustomView@ and @CustomController@. Will use the default template when there's no match.

bc.
griffon create-mvc foo -view=Dialog

Creates a new group definition overriding the default template for the View only.

bc.
griffon create-mvc foo -skipController=true

Creates a new group definition without a Controller. The configuration will look like this

bc.
mvcGroups {
    // MVC Group for "foo"
    'foo' {
        model      = 'foo.FooModel'
        view       = 'foo.FooView'
    }
    ...
}

bc.
griffon create-mvc foo -withController=foor.BarController

Creates a new group definition with another Controller class. The Controller is assumed to exist, a file will not be created for it. The configuration will look like this

bc.
mvcGroups {
    // MVC Group for "foo"
    'foo' {
        model      = 'foo.FooModel'
        view       = 'foo.FooView'
        controller = 'bar.BarController'
    }
    ...
}

