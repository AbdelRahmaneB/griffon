h4. Creating Plug-ins

Creating a Griffon plugin is a simple matter of running the command:

{code:java}
griffon create-plugin [PLUGIN NAME]
{code}

This will create a plugin project for the name you specify. Say for example you run @griffon create-plugin example@. This would create a new plugin project called @example@. 

The structure of a Griffon plugin is exactly the same as a regular Griffon project's directory structure, except that in the root of the plugin directory you will find a plugin Groovy file called the "plug-in descriptor".

The plugin descriptor itself ends with the convention @GriffonPlugin@ and is found in the root of the plugin project. For example:

{code:java}
class ExampleGriffonPlugin {
   def version = 0.1

   ...
}
{code}

All plugins must have this class in the root of their directory structure to be valid. The plugin class defines the version of the plugin and optionally various hooks into plugin extension points (covered shortly).

You can also provide additional information about your plugin using several special properties:

* @title@ - short one sentence description of your plugin
* @version@ - The version of your problem. Valid versions are for example "0.1", "0.2-SNAPSHOT", "0.1.4" etc.
* @griffonVersion@ - The version of version range of Griffon that the plugin supports. eg. "1.1 > *"
* @author@ - plug-in author's name
* @authorEmail@ - plug-in author's contact e-mail
* @description@ - full multi-line description of plug-in's features
* @documentation@ - URL where plug-in's documentation can be found

Here is an example from "FEST Griffon plugin":http://griffon.codehaus.org/Fest+plugin:

{code:java}
class QuartzGriffonPlugin {
class FestGriffonPlugin {
    def version = '0.3'
    def canBeGlobal = true
    def dependsOn = [:]

    def author = "Andres Almiray"
    def authorEmail = "aalmiray@users.sourceforge.net"
    def title = "Enables application testing with FEST"
    def description = '''\
Enables application testing with FEST (http://easytesting.org)
'''

    def documentation = "http://griffon.codehaus.org/Fest+Plugin"
}

{code}

h4. Installing & Distributing Plugins

To distribute a plugin you need to navigate to its root directory in a terminal window and then type:

{code:java}
griffon package-plugin
{code}

This will create a zip file of the plugin starting with @griffon-@ then the plugin name and version. For example with the example plug-in created earlier this would be @griffon-example-0.1.zip@. The @package-plugin@ command will also generate @plugin.xml@ file which contains machine-readable information about plugin's name, version, author, and so on.

Once you have a plugin distribution file you can navigate to a Griffon project and type:

{code:java}
griffon install-plugin /path/to/plugin/griffon-example-0.1.zip
{code}

If the plugin is hosted on a remote HTTP server you can also do:

{code:java}
griffon install-plugin http://myserver.com/plugins/griffon-example-0.1.zip
{code}
