apply plugin: 'groovy'

sourceCompatibility = '1.5'
targetCompatibility = '1.5'
archivesBaseName = 'griffon'
group = 'org.codehaus.griffon'

// we'll build jars our own way
jar.enabled = false

configurations {
    compile.transitive = true
    rt
    resources
    // wrapper
    cli { extendsFrom rt, compile }
    scripts { extendsFrom cli }
}

dependencies {
    lib = "$projectDir/lib" as File
    groovy files(fileTree(dir: lib, includes: ['groovy-all-1.7.*.jar']))
    compile files(fileTree(dir: lib, includes: ['*.jar'], excludes: ['groovy-all-1.7.*.jar']), "${System.getenv('JAVA_HOME')}/lib/tools.jar")
}

sourceSets {
    rt {
        java.srcDirs = []
        groovy.srcDirs = ['src/main/rt']
        classesDir = "$buildDir/classes/rt" as File
        resources.srcDirs = ['src/resources/rt']
    }
    cli {
        compileClasspath = sourceSets.rt.classes + configurations.compile
        java.srcDirs = []
        groovy.srcDirs = ['src/main/cli']
        classesDir = "$buildDir/classes/cli" as File
        // resources.srcDirs = ['src/resources/cli']
    }
    scripts {
        compileClasspath = sourceSets.rt.classes + sourceSets.cli.classes + configurations.compile
        java.srcDirs = []
        groovy.srcDirs = ['src/main/scripts']
        classesDir = "$buildDir/classes/scripts" as File
    }
    wrapper {
        compileClasspath = files(fileTree(dir: "$lib/wrapper" as File, includes: ['*.jar']))
        java.srcDirs = ['src/wrapper/java']
        classesDir = "$buildDir/classes/wrapper" as File
    }
    test {
        swingxFiles = files(fileTree(dir: file('lib/test'), includes: ['*.jar']))
        compileClasspath = sourceSets.rt.classes + sourceSets.cli.classes + configurations.compile + swingxFiles
        runtimeClasspath = classes + sourceSets.rt.classes + sourceSets.cli.classes + configurations.compile + swingxFiles
        java.srcDirs = []
        groovy.srcDirs = ['src/test/rt', 'src/test/cli']
    }
}

task allClasses(dependsOn: [rtClasses, cliClasses, scriptsClasses]) {
    description = "Compiles all rt, cli and script classes."
}

cliClasses.doLast {
    def buildProps = new File("$buildDir/classes/cli/build.properties")
    buildProps.text = """        griffon.version=$version
        groovy.version=$groovyVersion""".stripIndent(8)
}

configure([compileGroovy, compileTestGroovy]) {
    groovyOptions.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')
    groovyOptions.encoding = "UTF-8"
}

configure([compileJava, compileTestJava]) {
    options.deprecation = true
    options.debug = true
}

apply {
    from 'gradle/wrapper.gradle'
    from 'gradle/assemble.gradle'
    from 'gradle/docs.gradle'
    from 'gradle/installer.gradle'
//    from 'gradle/maven.gradle'
}

task fullDist(dependsOn: [zipGuide, zipBinary, zipSource, tarBinary, tarSource, izpack, deb]) {
    description = "Assembles all packages."
}
task bambooStage1(dependsOn: [clean, test]) {
    description = "Makes a full test run and assembles all packages."
}

task bambooStage2(dependsOn: [bambooStage1, fullDist, rpm]) {
    description = "Makes a full test run and assembles all packages."
}

task wrapper(type: Wrapper) {
    gradleVersion = '0.9-rc-2'
    jarPath = 'gradle/wrapper'
}

/*
apply plugin: 'maven'

uploadArchives {
    repositories.mavenDeployer {
        repository(url: file('repo'))
        addFilter('*') { a, f ->
        }
    }
}
*/
