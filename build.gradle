/*
 * Copyright 2008-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'base'
apply plugin: 'idea'
apply plugin: 'coveralls'
apply plugin: 'build-dashboard'
apply from: 'gradle/idea.gradle'

buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/pledbrook/plugins' }
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.6.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.9.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
        classpath 'org.ajoberstar:gradle-git:0.9.0'
        classpath 'uk.co.cacoethes:lazybones-gradle:1.1'
    }
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'

    repositories {
        jcenter()
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects { subproj ->
    plugins.withType(JavaPlugin) {
        configurations {
            compileOnly
            testCompileOnly
        }

        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = '1.7'
            targetCompatibility = '1.7'
        }

        dependencies {
            testCompile 'junit:junit:4.11'
            testCompile 'com.google.guiceberry:guiceberry:3.3.1'
            testCompile("com.google.inject:guice:$guiceVersion") {
                exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
            }
            if (!subproj.name.startsWith('gradle-')) {
                testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
            }
            testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
                exclude group: 'org.codehaus.groovy', module: 'groovy-all'
            }
            testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
        }

        sourceSets {
            main {
                compileClasspath += [configurations.compileOnly]
            }
            test {
                compileClasspath += [configurations.testCompileOnly]
            }
        }

        javadoc {
            classpath += [configurations.compileOnly]
        }

        idea {
            module {
                scopes.PROVIDED.plus += [configurations.compileOnly]
                scopes.PROVIDED.plus += [configurations.testCompileOnly]
            }
        }

        processResources {
            from(sourceSets.main.resources.srcDirs) {
                exclude '**/*.properties'
                exclude '**/*.groovy'
                exclude '**/*.xml'
            }
            from(sourceSets.main.resources.srcDirs) {
                include '**/*.properties'
                include '**/*.groovy'
                include '**/*.xml'
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'application.name': project.name,
                    'application.version': project.version,
                    'griffon.version': project.version
                ])
            }
        }

        processTestResources {
            from(sourceSets.test.resources.srcDirs) {
                exclude '**/*.properties'
                exclude '**/*.groovy'
                exclude '**/*.xml'
            }
            from(sourceSets.test.resources.srcDirs) {
                include '**/*.properties'
                include '**/*.groovy'
                include '**/*.xml'
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'application.name': project.name,
                    'application.version': project.version,
                    'griffon.version': project.version
                ])
            }
        }

        task sourceJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        tasks.withType(AbstractCompile) {
            if (rootProject.hasProperty('lint') && rootProject.lint.toBoolean()) {
                options.compilerArgs = [
                    '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
                ]
            }
        }

        subproj.apply from: rootProject.file('gradle/publish.gradle')
        subproj.apply from: rootProject.file('gradle/code-quality.gradle')

        if (subproj.publishJars.toBoolean()) {
            javadoc {
                excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

                options.use         = true
                options.splitIndex  = true
                options.encoding    = 'UTF-8'
                options.author      = true
                options.version     = subproj.sourceCompatibility
                options.windowTitle = "$subproj.pomDescription $version"
                options.docTitle    = "$subproj.pomDescription $version"
                options.footer      = rootProject.javadocFooter
                options.links       = ['http://www.slf4j.org/apidocs/',
                                       'http://jsr-305.googlecode.com/svn/trunk/javadoc/',
                                       'http://docs.oracle.com/javase/7/docs/api/']

                doLast { task ->
                    copy {
                        into task.destinationDir
                        from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                             rootProject.file('src/javadoc/resources/css/stylesheet.css')
                    }
                    copy {
                        into file("${task.destinationDir}/resources")
                        from rootProject.file('src/javadoc/resources/img/')
                    }
                }
            }
        }
    }
}

task projectCoberturaMerge(type: ProjectCoberturaMergeTask) {

}

task projectCoberturaReport(type: ProjectCoberturaReportTask) {

}
