/*
 * Copyright 2010-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin:'base'
configurations{
	runtime {transitive = false}
	docs
	groovy
}

repositories {
	mavenCentral()
	mavenRepo name: 'SpringSource', urls: 'http://repository.springsource.com/maven/bundles/release'
    mavenRepo name: 'JavaNet', urls: 'http://download.java.net/maven/2/'
}

dependencies{
	groovy localGroovy() //for api docs generation needed (groovydoc)
    
	runtime project(":griffon-rt")
	runtime project(":griffon-cli")
	runtime project(":griffon-scripts")

	// problems with ant classloader makes it necessary to duplicate the deps
	// in buildSrc/ and this docs configurations
    docs group: 'org.grails', name: 'grails-docs', version: '1.3.6'
    docs group: 'radeox', name: 'radeox', version: '1.0-b2'
    docs group: 'com.lowagie', name: 'itext', version: '2.0.8'
    docs group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
    docs group: 'org.xhtmlrenderer', name: 'core-renderer', version: 'R8'
    docs group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
}

subprojects {
	apply plugin:'groovy'
	apply from:"${rootDir}/gradle/maven.gradle"
	apply from:"${rootDir}/gradle/codeQuality.gradle"
	
	sourceCompatibility = '1.5'
	targetCompatibility = '1.5'
	group = 'org.codehaus.griffon'

	repositories {
	    flatDir(dirs: file('lib/wrapper'))
	    mavenLocal()
	    mavenCentral()
	    mavenRepo name: 'Codehaus', urls: 'http://repository.codehaus.org'
	    mavenRepo name: 'SpringSource', urls: 'http://repository.springsource.com/maven/bundles/release'
	}
	
	dependencies{
		groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
	}
	
	task groovyDocJar(type:Jar){
		classifier = 'javadoc'
		from (groovydoc.outputs.files)
	}
}

tasks.withType(Jar).all {jar ->
    jar.mavenArtifact = false
    jar.appFileJar = false
}

task jarSharedFiles(type: Jar) {
    //dependsOn { distWrapper }
    appFileJar = true
    archiveName = "griffon-shared-files.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from "$buildDir/distributions/wrapper"
}

task jarAppFiles(type: Jar) {
    appFileJar = true
    archiveName = "griffon-app-files.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from('src/dist/src/griffon/griffon-app') {
        into 'griffon-app'
    }
}

task jarPluginFiles(type: Jar) {
    appFileJar = true
    archiveName = "griffon-plugin-files.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from 'src/dist/src/griffon/templates/plugins'
}

task jarIntegrationFiles(type: Jar) {
    appFileJar = true
    archiveName = "griffon-integration-files.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from 'src/dist/src/griffon/templates/ide-support'
    from 'src/dist/src/griffon/ant'
}

resourceFilesJars = tasks.withType(Jar).matching({ jar -> jar.appFileJar } as Spec)

task jarResources(type: Jar) {
    dependsOn { resourceFilesJars.all }
    mavenArtifact = true
    appendix = 'resources'
   	resourceFilesJars.each{task ->
		from task.outputs.files
	}
}

task jarSource(type: Jar){
    description = "Zips the source distribution."
    from(project(":griffon-cli").sourceSets.main.allSource) {
        include 'griffon/test/**/*'
        include 'griffon/beans/**/*'
        include 'griffon/util/EventPublisher*'
        include 'griffon/util/Threading*'
        include '**/*.html'
    }
    from(project(":griffon-cli").sourceSets.main.allSource)
	classifier = 'sources'
    into "griffon-$version"
}

// add according excludes/includes in the api files
// actually files does not support exclusive filter 
// operation when appended via plus() 
// -> @todo: file gradle issue

task apiDocs(type: Groovydoc) {
	def cliSources = files("subprojects/cli/src/main/groovy")
	def rtSources = files("subprojects/rt/src/main/groovy")
    source = rtSources + cliSources
	destinationDir = "$buildDir/docs/api" as File
    docTitle = "Griffon $version"
    header = "Griffon $version"
    windowTitle = "Griffon $version"
    groovyClasspath = configurations.groovy
	classpath = project(":griffon-rt").sourceSets.main.output + 
				project(":griffon-cli").sourceSets.main.output + 
				project(":griffon-cli").configurations.compile 
				
				
    includePrivate = true
    use = true

    link('http://java.sun.com/j2se/1.5.0/docs/api', 'java.,org.xml.,javax.,org.xml.')
    link('http://www.dpml.net/api/ant/1.7.0', 'org.apache.ant.,org.apache.tools.ant.')
    link('http://junit.sourceforge.net/junit3.8.1/javadoc/', 'org.junit.,junit.framework.')
    link('http://groovy.codehaus.org/api/', 'groovy.,org.codehaus.groovy.')
}

task buildGuide(type: GrailsDoc) {
    srcDir = file('src/guide/src')
	props = file('src/guide/guide.properties')
    imagesDir = file('src/guide/resources/img')
	outputDir = file("$buildDir/manual")
}

task pdfGuide(type:PdfGuide, dependsOn:buildGuide) {
	inputs.files file("$buildDir/manual/guide")
	pdfName = "griffon-guide-${version}.pdf"
}

task zipBinary(type:Zip){
	description = "Zips the binary distribution."
    classifier = 'bin'
    into "griffon-$version"
    from("."){
		include "README"
		include "INSTALL"
		include "LICENSE"
	}
	from('src/dist'){
		exclude 'bin'
	}
	from('src/griffon'){
		into 'src/griffon'
	}
	from('src/dist/bin'){
		into 'bin'
        fileMode = 0755	
	}
	into('lib') { 
		from project(":griffon-cli").configurations.runtime
	}
	
	[":griffon-cli",":griffon-rt",":griffon-scripts"].each { subproj ->
		from(project(subproj).jar.outputs.files){
			into("dist")
		}
	}
	
	from(jarResources.outputs.files){
		into("dist")
	}
	
	into('scripts'){
		from(project(":griffon-scripts").sourceSets.main.allSource)
	}
	
	into('doc'){
		from(project(":griffon-cli").groovyDocJar.outputs.files)
		from(project(":griffon-rt").groovyDocJar.outputs.files)
		from(jarSource.outputs.files)
	}
	
	into('guide'){
		from(buildGuide.outputs.files)
		from(pdfGuide.outputs.files)
		filter(ReplaceTokens, tokens: ['griffon.version': version])
	
		into('api'){
			from(apiDocs.outputs.files)
		}	
	}
}

distSourceSpec = copySpec{
    from('.') {
        exclude 'build'
        exclude '**/.git*'
        exclude '.git*'
        exclude '.gradle*'
        exclude 'clover.license'
        exclude 'cobertura.ser'
        exclude '**/*.ipr'
        exclude '**/*.iws'
        exclude '**/*.iml'
    }   
}

task zipSource(type: Zip){
    description = "Zips the source distribution."
    with distSourceSpec
    classifier = 'src'
    into "griffon-$version"
}

task tarSource(type: Tar) {
    description = "Tars the source distribution."
    with distSourceSpec
    classifier = 'src'
    into "griffon-$version"  
    compression = Compression.GZIP
}

/*sourceSets {
    scripts {
        compileClasspath = sourceSets.rt.classes + sourceSets.cli.classes + configurations.scripts
        java.srcDirs = []
        groovy.srcDirs = ['src/main/scripts']
        classesDir = "$buildDir/classes/scripts" as File
    }*/
    /*wrapper {
        compileClasspath = configurations.wrapper
        java.srcDirs = ['src/wrapper/java']
        classesDir = "$buildDir/classes/wrapper" as File
    }
    intTest {
        compileClasspath = sourceSets.rt.classes + sourceSets.cli.classes + sourceSets.scripts.classes + configurations.cli + configurations.scripts
        runtimeClasspath = classes + sourceSets.rt.classes + sourceSets.cli.classes + sourceSets.scripts.classes + configurations.cli + configurations.scripts + files(fileTree("$buildDir/libs/griffon-resources-${version}.jar"))
        java.srcDirs = []
        groovy.srcDirs = ['src/test/integration']
    }
}*/

/*
task allClasses(dependsOn: [rtClasses, cliClasses, scriptsClasses]) {
    description = "Compiles all rt, cli and script classes."
}*/


/*
task intTest(type: Test) {
    dependsOn jarResources
    testClassesDir = sourceSets.intTest.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
    testSrcDirs = sourceSets.intTest.groovy.srcDirs as List
}

task allTests(dependsOn: [test, intTest]) {
    description = "Runs all unit and integration tests."
}

task fullDist(dependsOn: [zipGuide, zipBinary, zipSource, tarBinary, tarSource, izpack, deb]) {
    description = "Assembles all packages."
}

task bambooStage1(dependsOn: [clean, test]) {
    description = "Makes a full test run and assembles all packages."
}

task bambooStage2(dependsOn: [bambooStage1, fullDist, rpm]) {
    description = "Makes a full test run and assembles all packages."
}

task wrapper(type: Wrapper) {
    gradleVersion = '0.9.2'
    jarFile = 'gradle/wrapper/gradle-wrapper.jar'
}
*/
