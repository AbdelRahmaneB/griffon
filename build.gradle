/*
 * Copyright 2010-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'base'
apply plugin: 'idea'
apply plugin: 'build-dashboard'
apply from: 'gradle/idea.gradle'

allprojects {
    ext.maven = false
}

Date buildTimeAndDate = new Date()
ext {
    buildTime = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildDate = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

subprojects { subproj ->
    apply plugin: 'base'
    apply plugin: 'idea'
}

evaluationDependsOnChildren()

subprojects { subproj ->
    if (subproj.plugins.hasPlugin('java')) {
        configurations {
            compileOnly
        }

        repositories {
            jcenter()
            maven {
                name 'Kordamp'
                url 'http://dl.bintray.com/content/aalmiray/kordamp'
            }
            mavenCentral()
        }

        sourceSets {
            main {
                compileClasspath += configurations.compileOnly
            }
        }

        javadoc {
            classpath += configurations.compileOnly
        }

        idea {
            module {
                scopes.PROVIDED.plus += configurations.compileOnly
            }
        }
    }

    if (subproj.ext.maven == true) {
        // apply plugin: 'java'
        apply from: "${rootDir}/gradle/maven.gradle"
        apply from: "${rootDir}/gradle/publish.gradle"
        apply from: "${rootDir}/gradle/coverage.gradle"
        apply from: "${rootDir}/gradle/codeQuality.gradle"

        dependencies {
            testCompile 'junit:junit:4.11'
            testCompile 'com.google.guiceberry:guiceberry:3.3.1'
            testCompile("com.google.inject:guice:$guiceVersion") {
                exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
            }
            testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
            testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
            testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
        }

        javadoc {
            excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

            options.use         = true
            options.splitIndex  = true
            options.encoding    = 'UTF-8'
            options.author      = true
            options.version     = subproj.sourceCompatibility
            options.windowTitle = "${subproj.ext.pomDescription} $version"
            options.docTitle    = "${subproj.ext.pomDescription} $version"
            options.footer      = "Copyright &amp;copy; 2008-2014 The Griffon Team. All rights reserved."
            options.links       = ['http://www.slf4j.org/apidocs/',
                                   'http://jsr-305.googlecode.com/svn/trunk/javadoc/',
                                   'http://docs.oracle.com/javase/7/docs/api/']

            doLast { task ->
                copy {
                    into task.destinationDir
                    from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                        rootProject.file('src/javadoc/resources/css/stylesheet.css')
                }
                copy {
                    into file("${task.destinationDir}/resources")
                    from rootProject.file('src/javadoc/resources/img/')
                }
            }
        }

        task sourceJar(type: Jar) {
            description "An archive of the source code"
            classifier "sources"
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            description "An archive of the JavaDocs for"
            classifier "javadoc"
            from javadoc
        }

        artifacts {
            archives jar, javadocJar, sourceJar
        }

        compileJava {
            doFirst {
                if (rootProject.hasProperty('lint') && rootProject.lint == true) {
                    options.compilerArgs = [
                        '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
                    ]
                }
            }
        }

        jar {
            manifest {
                attributes(
                    'Built-By': System.properties['user.name'],
                    'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")",
                    'Build-Date': buildTime,
                    'Build-Time': buildDate,
                    'Specification-Title': subproj.name,
                    'Specification-Version': subproj.version,
                    'Specification-Vendor': 'griffon-framework.org',
                    'Implementation-Title': subproj.name,
                    'Implementation-Version': subproj.version,
                    'Implementation-Vendor': 'griffon-framework.org'
                )
            }
        }
    }
}
