/*
 * Copyright 2010-2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.expr.MethodCallExpression;

/**
 * @author Andrew Eisenberg
 * @author Andres Almiray
 */

supportsVersion(groovyEclipse: '2.5.1')

def griffonArtifact = { String folder ->
	sourceFolderOfCurrentType("griffon-app/" + folder)
}

def modelClass = griffonArtifact("models")
def controllerClass = griffonArtifact("controllers")
def serviceClass = griffonArtifact("services")
def viewClass = griffonArtifact("views") & isScript()

(modelClass | controllerClass | 
	serviceClass | viewClass).accept {
	
	provider = "Griffon DSL"
	delegatesTo "griffon.core.GriffonMvcArtifact"
	delegatesTo "griffon.core.GriffonArtifact"
	delegatesTo "griffon.core.MVCHandler"
	delegatesTo "griffon.core.ThreadingHandler"
	delegatesTo "griffon.core.ResourceHandler"
}
	
viewClass.accept {
	delegatesTo "griffon.core.GriffonView"
}

enclosingClass(annotatedBy('griffon.transform.EventPublisher')).accept {
    provider = "Griffon DSL"
	delegatesTo "griffon.util.EventPublisher"
}

enclosingClass(annotatedBy('griffon.transform.MVCAware')).accept {
    provider = "Griffon DSL"
	delegatesTo "griffon.core.MVCHandler"
}

enclosingClass(annotatedBy('griffon.transform.ThreadingAware')).accept {
    provider = "Griffon DSL"
	delegatesTo "griffon.core.ThreadingHandler"
}

enclosingClass(annotatedBy('griffon.transform.ResourcesAware')).accept {
    provider = "Griffon DSL"
	delegatesTo "griffon.core.ResourceHandler"
}

enclosingClass(annotatedBy('griffon.transform.MessageSourceAware')).accept {
    provider = "Griffon DSL"
	delegatesTo "griffon.core.i18n.MessageSource"
}

enclosingClass(annotatedBy('griffon.transform.ResourceResolverAware')).accept {
    provider = "Griffon DSL"
	delegatesTo "griffon.core.resources.ResourceResolver"
}
