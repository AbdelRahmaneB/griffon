[Action Interceptors|api:griffon.core.controller.GriffonControllerActionInterceptor] open a new set of possibilities by allowing developers and plugin authors to define code that should be executed before and after any controller action is executed by the framework. For example, you may want to protect the execution of a particular action given specific permissions; the [shiro|http://artifacts.griffon-framework.org/plugin/shiro] uses annotations that are handled by an Action Interceptor, like this

{code}
import griffon.plugins.shiro.annotation.*

@RequiresAuthentication
class PrinterController {
   @RequiresPermission('printer:print')
   def print = { ... }

   @RequiresRoles('administrator')
   def configure = { ... }
}
{code}

The [scaffolding|http://artifacts.griffon-framework.org/plugin/scaffolding] plugin on the other hand modifies the arguments sent to the action. Take the following snippet for example

{code}
import griffon.plugins.shiro.annotation.*
import org.apache.shiro.authc.UsernamePasswordToken
import griffon.plugins.shiro.SubjectHolder
import javax.swing.JOptionPane

class StrutsController {
    @RequiresGuest
    def login = { LoginCommandObject cmd ->
        try {
            SubjectHolder.subject.login(new UsernamePasswordToken(cmd.username, cmd.password))
        } catch(Exception e) {
            JOptionPane.showMessageDialog(
                app.windowManager.findWindow('mainWindow'),
                'Invalid username and/or password',
                'Security Failure', JOptionPane.ERROR_MESSAGE)
        }
    }

    @RequiresAuthentication
    def logout = {
        SubjectHolder.subject.logout()
    }
}
{code}

Note that the @login@ action requires an instance of @LoginCommandObject@. The @scaffolding@ plugin is aware of this fact; it will create an instance of said class, wire up an scaffolded view in a dialog and present it to the user. The @LoginCommandObject@ instance will be set as the action's arguments if it validates successfully, otherwise action execution is aborted.

h4. Implementing an Action Interceptor

Action interceptors must implement the [griffon.core.controller.GriffonControllerActionInterceptor|api:griffon.core.controller.GriffonControllerActionInterceptor] interface. There's a handy base class  ([org.codehaus.griffon.runtime.core.controller.AbstractGriffonControllerActionInterceptor|api:org.codehaus.griffon.runtime.core.controller.AbstractGriffonControllerActionInterceptor]) that provides sensible defaults. Say you'd want to know how much time it took for an action to be executed, also if an exception occurred during its execution. This interceptor could be implemented as follows

{code}
class TracerGriffonControllerActionInterceptor extends AbstractGriffonControllerActionInterceptor {
    private final Map<String, Long> TIMES = [:]

    Object[] before(GriffonController controller, String actionName, Object[] args) {
        TIMES[qualifyActionName(controller, actionName)] = System.nanoTime()
        return super.before(controller, actionName, args)
    }

    void after(ActionExecutionStatus status, GriffonController controller, String actionName, Object[] args) {
        String qualifiedActionName = qualifyActionName(controller, actionName)
        long time = TIMES[qualifiedActionName] - System.nanoTime()
        println("Action ${qualifiedActionName} took ${time} ns [${status}]")
    }
}
{code}

The [griffon.core.controller.GriffonControllerActionInterceptor|api:griffon.core.controller.GriffonControllerActionInterceptor] interface defines a handful of methods that are invoked by the @[GriffonControllerActionManager|api:griffon.core.controller.GriffonControllerActionManager]@ at very specific timings during the lifetime and execution of controller actions.

 * **void configure(GriffonController controller, String actionName, Method method)**
 * **void configure(GriffonController controller, String actionName, Field closure)**

The @configure()@ method is called during the configuration phase, when the Action Manager creates the actions. There are two variants of this method, one that accepts a Groovy closure, the other that takes a Java method as argument. These methods are called once in the lifetime of an action.

 * **Object[] before(GriffonController controller, String actionName, Object[] args)**

The @before()@ method is invoked every time an action is about to be executed. This method is responsible for adjusting the arguments (if needed) or aborting the action execution altogether. Any exception thrown by an interceptor in this method will halt action execution however only [griffon.core.controller.AbortActionExecution|api:griffon.core.controller.AbortActionExecution] is interpreted as a graceful abort.

 * **boolean exception(Exception exception, GriffonController controller, String actionName, Object[] args)**

The @exception()@ method is invoked only when an exception occurred during the action's execution. Implementors must return @true@ if the exception was handled successfully. The exception will be rethrown by the Action Manager if no interceptor handled the exception. This happens as the last step of the action interception procedure.

 * **void after(ActionExecutionStatus status, GriffonController controller, String actionName, Object[] args)**

The @after()@ method is called after an action has been executed. Any exceptions occurred during the action's execution should have been handled by @exception()@. The @status@ argument specifies if the action was successfully executed (@OK@), if it was aborted by an interceptor (@ABORTERD@) or if an exception occurred during its execution (@EXCEPTION@).

Action interceptors are instantiated using the application's internal instantiation mechanism, thus allowing interceptors to participate in Dependency Injection driven by @[NewInstance|api:artifactEvents]@ events.

h4. Configuration

Action Interceptors are delivered to applications by [addons|guide:addons]. Addons now have an @actionInterceptors@ property that define the interceptors they provide. For example, say an addon provides the @Tracer@ interceptor we just defined in the previous section. That particular interceptor can be registered as follows

{code}
class TracerGriffonAddon {
    Map actionInterceptors = [
        tracer: [
            interceptor: 'com.acme.plugins.tracer.TracerGriffonControllerActionInterceptor'
        ]
    ]
}
{code}

Addons may register as many interceptors as needed. Interceptors may also depend on other interceptor, for example

{code}
class TracerGriffonAddon {
    Map actionInterceptors = [
        tracer: [
            transactional: 'com.acme.plugins.tracer.TransactionalGriffonControllerActionInterceptor'
        ]
        tracer: [
            dependsOn: ['transactional']
            interceptor: 'com.acme.plugins.tracer.TracerGriffonControllerActionInterceptor'
        ]
    ]
}
{code}

Now the @tracer@ interceptor depends on @transactional@, which means @transactional@ will be called before @tracer@. Interceptors may define dependencies on interceptors provided by other addons, just specify the names in their respective @dependsOn:@ property.

It's also possible to globally override the order of execution of interceptors, or define and order when interceptors are orthogonal. Take for example the @security@ interceptor provided by the [shiro|http://artifacts.griffon-framework.org/plugin/shiro] plugin and the @scaffolding@ interceptor provided by  [scaffolding|http://artifacts.griffon-framework.org/plugin/scaffolding]. These interceptors know nothing about each other however @security@ should be called before @scaffolding@. This can be accomplished by adding the following snippet to @Config.groovy@

{code}
griffon.controller.action.interceptor.order = ['security', 'scaffolding']
{code}