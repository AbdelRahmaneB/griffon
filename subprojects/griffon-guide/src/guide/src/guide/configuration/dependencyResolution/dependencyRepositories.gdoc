h4. Remote Repositories

Griffon, when installed, does not use any remote public repositories. There is a default @griffonHome()@ repository that will locate the JAR files Griffon needs from your Griffon installation. If you want to take advantage of a public repository you need to specify as such inside the @repositories@ block:

{code}
repositories {
    mavenCentral()
}
{code}

In this case the default public Maven repository is specified. To use the SpringSource Enterprise Bundle Repository you can use the @ebr()@ method:

{code}
repositories {
    ebr()
}
{code}

You can also specify a particular Maven repository to use by URL:

{code}
repositories {
    mavenRepo "http://repository.codehaus.org"
}
{code}

Starting with Griffon 1.4.0 you may specify Bintray's JCenter repository with

{code}
repositories {
    jcenter()
}
{code}

even a custom Bintray repository by defining username/repository combinations like the following ones

{code}
repositories {
    bintray(username: 'aalmiray', repository: 'kordamp')
    bintray('aalmiray/griffon')
}
{code}

h4. Local Resolvers

If you do not wish to use a public Maven repository you can specify a flat file repository:

{code}
repositories {
    flatDir name:'myRepo', dirs:'/path/to/repo'
}
{code}

h4. Custom Resolvers

If all else fails since Griffon builds on Apache Ivy you can specify an Ivy resolver:

{code}
repositories {
    resolver new URLResolver(...)
}

{code}

h4. Authentication

If your repository requires some form of authentication you can specify as such using a @credentials@ block:

{code}
credentials {
    realm = ".."
    host = "localhost"
    username = "myuser"
    password = "mypass"
}
{code}

The above can also be placed in your @USER_HOME/.griffon/settings.groovy@ file using the @griffon.project.ivy.authentication@ setting:

{code}
griffon.project.ivy.authentication = {
    credentials {
        realm = ".."
        host = "localhost"
        username = "myuser"
        password = "mypass"
    }    
}
{code}

