h4. Distributing Plugins in the Griffon Central Plugins Repository

The preferred way of plugin distribution is to publish your under Griffon Plugins Repository. This will make your plugin visible to the [list-plugins|commandLine] command:

{code:java}
griffon list-plugins
{code}

Which lists all plugins in the Griffon Plugin repository and also the [plugin-info|commandLine] command:

{code:java}
griffon plugin-info [plugin-name]
{code}

Which outputs more information based on the meta info entered into the plug-in descriptor. 

When you have access to the Griffon Plugin repository to release your plugin you simply have to execute the [release-plugin|commandLine] command:

{code:java}
griffon release-plugin
{code}

This will automatically commit changes to SVN, do some tagging and make your changes available via the [list-plugins|commandLine] command.

h4. Configuring Additional Repositories

Griffon 0.9 and above use Ivy under the hood to resolve plugin dependencies. The mechanism for defining additional plugin repositories is largely the same as [defining repositories for JAR dependencies|guide:ivy]. For example you can define a remote Maven repository that contains Griffon plugins using the following syntax in @griffon-app/conf/BuildConfig.groovy@:

{code}
repositories {
    mavenRepo "http://repository.codehaus.org"
}
{code}

You can also define a SVN-based Griffon repository (such as the one hosted at http://svn.codehaus.org/griffon/plugins/) using the @griffonRepo@ method:

{code}
repositories {
    griffonRepo "http://myserver/mygriffonrepo"
}
{code}

There is a shortcut to setup the Griffon central repository:

{code}
repositories {
    griffonCentral()
}
{code}

The order in which plugins are resolved is based on the ordering of the repositories. So for example in this case the Griffon central repository will be searched last:

{code}
repositories {
    griffonRepo "http://myserver/mygriffonrepo"
    griffonCentral()
}
{code}

All of the above examples use HTTP, however you can specify any [Ivy resolver|http://ant.apache.org/ivy/history/latest-milestone/settings/resolvers.html] to resolve plugins with. Below is an example that uses an SSH resolver:

{code}
def sshResolver = new SshResolver(user:"myuser", host:"myhost.com")
sshResolver.addArtifactPattern("/path/to/repo/griffon-[artifact]/tags/LATEST_RELEASE/griffon-[artifact]-[revision].[ext]")
sshResolver.latestStrategy = new org.apache.ivy.plugins.latest.LatestTimeStrategy()
sshResolver.changingPattern = ".*SNAPSHOT"
sshResolver.setCheckmodified(true)
{code}

The above example defines an artifact pattern which tells Ivy how to resolve a plugin zip file. For a more detailed explanation on Ivy patterns see the [relevant section|http://ant.apache.org/ivy/history/2.1.0/concept.html#patterns] in the Ivy user guide.

h4. Publishing to Maven Compatible Repositories

In general it is recommended for Griffon 1.3 and above to use standard Maven-style repositories to self host plugins. The benefits of doing so include the ability for existing tooling and repository managers to interpret the structure of a Maven repository. In addition Maven compatible repositories are not tied to SVN as Griffon repositories are.

In order to publish a plugin to a Maven repository you need to use the Maven publisher plugin. Please refer to the section of the [Maven deployment|guide:mavendeploy] user guide on the subject.

h4. Publishing to Griffon Compatible Repositories

To publish a Griffon plugin to a Griffon compatible repository you specify the @griffon.plugin.repos.distribution.myRepository@ setting within the griffon-app/conf/BuildConfig.groovy file:

{code}
griffon.plugin.repos.distribution.myRepository="https://svn.server.org/griffon/trunk/griffon-test-plugin-repo"
{code}

You can also provide this settings in the USER_HOME/.griffon/settings.groovy file if you prefer to share the same settings across multiple projects.

Once this is done you need to use the @repository@ argument of the @release-plugin@ command to specify the repository you want to release the plugin into:

{code}
griffon release-plugin -repository=myRepository
{code}

