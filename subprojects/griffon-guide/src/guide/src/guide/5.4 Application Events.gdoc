Applications have the ability to publish events from time to time to communicate that something of interest has happened at runtime. Events will be triggered by the application during each of its life cycle phases, also when MVC groups are created and destroyed.

{note}
All application event handlers are guaranteed to be called in the same thread that originated the event. 
{note}

Any artifact or class can trigger an application event, by routing it through the reference to the current running application instance. All artifacts posses an instance variable that points to that reference. All other classes can use [ApplicationHolder|api:griffon.util.ApplicationHolder] to gain access to the current application's instance.

Publishing an event can be done synchronously on the current thread or asynchronously relative to the UI thread. For example, the following snippet will trigger an event that will be handled in the same thread, which could be the UI thread itself

{code}
app.event('MyEventName', ['arg0', 'arg1'])
{code}

Whereas the following snippet guarantees that all event handlers that are interested in an event of type @MyEventName@ will be called outside of the UI thread

{code}
app.eventAsync('MyEventName', ['arg0', 'arg1'])
{code}
