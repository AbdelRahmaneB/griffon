h4. Creating Plug-ins

Creating a Griffon plugin is a simple matter of running the command:

{code:java}
griffon create-plugin [PLUGIN NAME]
{code}

This will create a plugin project for the name you specify. Say for example you run @griffon create-plugin example@. This would create a new plugin project called @example@. 

The structure of a Griffon plugin is exactly the same as a regular Griffon project's directory structure, except that in the root of the plugin directory you will find a plugin Groovy file called the "plugin descriptor".

The plugin descriptor itself ends with the convention @GriffonPlugin@ and is found in the root of the plugin project. For example:

{code:java}
class ExampleGriffonPlugin {
   def version = 0.1

   ...
}
{code}

All plugins must have this class in the root of their directory structure to be valid. The plugin class defines the version of the plugin and optionally various hooks into plugin extension points (covered shortly).

You can also provide additional information about your plugin using several special properties:

* @title@ - short one sentence description of your plugin
* @version@ - the version of your plugin. Valid versions are for example "0.1", "0.2-SNAPSHOT", "0.1.4" etc.
* @griffonVersion@ - The version of version range of Griffon that the plugin supports. eg. "1.1 > *"
* @license@ - the plugin's license name in one sentence
* @pluginIncludes@ - additional resources that should be included in the plugin zip
* @toolkits@ - a list of supported toolkits \[swing, javafx, swt, pivot, gtk\]
* @platforms@ - a list of supported platforms \[linux, linux64, windows, windows64, macosx, macosx64, solaris, solaris64\]
* @authosr@ - a list of plugin author names/emails
* @description@ - full multi-line description of plugin's features
* @documentation@ - URL where plugin's documentation can be found
* @source@ - URL where plugin's source can be found

Here is an example from "Swing Griffon plugin":http://artifacts.griffon-framework.org/plugins/swing:

{code:java}
class SwingGriffonPlugin {
    String version = '0.9.5'
    String griffonVersion = '0.9.5 > *'
    Map dependsOn = [:]
    List pluginIncludes = []
    String license = 'Apache Software License 2.0'
    List toolkits = ['swing']
    List platforms = []
    String documentation = ''
    String source = 'https://github.com/griffon/griffon-swing-plugin'

    List authors = [
        [
            name: 'Andres Almiray',
            email: 'aalmiray@yahoo.com'
        ]
    ]
    String title = 'Enables Swing support'
    String description = '''
Enables the usage of Swing based components in Views.

Usage
----
This plugin enables the usage of the following nodes inside a View.

### Swing Nodes

All nodes from [SwingBuilder][1]. All nodes follow a naming convention that makes it easy to
determine the type of object the create. Take for example *JButton*. Remove the first character
from the name (J) then uncapitalize the next one. You end up with *button*. That's the name
of the node you must use if what you want is to create an instance of a *JButton*. Apply the
same rule for every Swing class that begins with a capital J. For all other classes you only
need to uncapitalize the first character, for example *GridLayout* becomes *gridLayout*.

### Groovy Nodes

The following nodes are provided by [SwingBuilder][1] too, however they have no direct relationship
with a particualr Swing/AWT class.

...

Configuration
-------------
There's no special configuration for this plugin.

[1]: http://groovy.codehaus.org/Swing+Builder
'''
}
{code}

h4. Installing & Distributing Plugins

To distribute a plugin you need to navigate to its root directory in a terminal window and then type:

{code:java}
griffon package-plugin
{code}

This will create a zip file of the plugin starting with @griffon-@ then the plugin name and version. For example with the example plugin created earlier this would be @griffon-example-0.1.zip@. The @package-plugin@ command will also generate @plugin.json@ file which contains machine-readable information about plugin's name, version, author, and so on.

Once you have a plugin distribution file you can navigate to a Griffon project and type:

{code:java}
griffon install-plugin /path/to/plugin/griffon-example-0.1.zip
{code}

If the plugin is hosted on a remote HTTP server you can also do:

{code:java}
griffon install-plugin http://myserver.com/plugins/griffon-example-0.1.zip
{code}

h4. Distributing Plugins in Griffon Plugins Repository

TBD

