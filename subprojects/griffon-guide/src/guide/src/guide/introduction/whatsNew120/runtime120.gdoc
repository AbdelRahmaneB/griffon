h4. Service LifeCycle

Services now have their own life-cycle methods, similarly to their MVC counterparts. See the section [Service LifeCycle|guide:serviceLifecycle] for more information.

h4. Service Configuration DSL

Services properties may now be configured externally to the service class, using a simple DSL. Refer to the [Service Configuration DSL|guide:serviceConfiguration] section to learn more.

h4. External Configuration

Applications now have the ability to specify alternate locations for configuration files and scripts. Simply configure @griffon.config.locations@ in @Config.groovy@, for example

{code:java}
griffon.config.locations = [
    "classpath:${appName}-config.properties",
    "classpath:${appName}-config.groovy",
    "file:${userHome}/.griffon/${appName}-config.properties",
    "file:${userHome}/.griffon/${appName}-config.groovy"]
{code}

Section [External Configuration Support|guide:externalConfiguration] covers this feature in more detail.

h4. New Application Events

Instances managed by the application (such as MVC members) will now trigger a @DestroyInstance@ event when the instance is no longer needed. This event is the counterpart of @NewInstance@.

h4. EventRouter Factory

It's now possible to instantiate custom instances of @EventRouter@ by defining a custom @EventRouterFactory@.

h4. Remove MVC Configurations

MVC Configurations can now be removed from the application's MVCGroupManager. This paves the way for application plugins that may be turned on/off at runtime.

h4. Vetoable Models

In the past @GriffonModel@ implemented the @[griffon.core.Observable|api:griffon.core.Observable]@. With this release they got upgraded to @[griffon.core.Vetoable|api:griffon.core.Vetoable]@.

h4. Skip Lifecycle Script/Handlers

Applications now have the choice of skipping the execution of lifecycle scripts at their discretion. Specify the following flag in @Config.groovy@ to skip them

{code}
app.lifecycle.handler.disable = true
{code}
