h4. Uninstall Dependent Plugins

Sometimes, when installing a particular plugin A other plugins get installed too, for example [lookandfeel|http://artifacts.griffon-framework.org/plugin/lookandfeel] will install [miglayout|http://artifacts.griffon-framework.org/plugin/miglayout]. However when uninstalling plugin A its dependencies remain, that is, uninstalling @lookandfeel@ will leave @miglayout@ installed in the application. Now, there's a new flag that can be used to force the removal of a plugin plus all of its dependent plugins. Say you'd like to remove both @lookandfeel@ with all of its dependent plugins with one single command, here's how it can be done

{code}
griffon uninstall-plugin lookandfeel --force
{code}

Dependent plugins will be uninstalled as long as no other plugin requires them. Take for example an application that has @dialogs@, @lookandfeel@ and @miglayout@ plugins installed. Both @dialogs@ and @lookandfeel@ depend on @miglayout@. Invoking the previous command will uninstall @lookandfeel@ alone as @dialogs@ still requires @miglayout@.

It's possible to find out which plugins will be uninstalled without executing the uninstall operation completely, just specify the @dry-run@ flag with a true value. In the previous example we get the following result when attempting an uninstall of @lookandfeel@

{code}
griffon uninstall-plugin --dry-run=true lookandfeel
...
Plugin to be uninstalled:
     lookandfeel-1.0.0
{code}

Whereas the following command shows what happens if we attempt uninstalling @dialogs@

{code}
griffon uninstall-plugin --dry-run=true dialogs
...
Plugins to be uninstalled:
     glazedlists-2.0.0
     dialogs-0.6.0
{code}

h4. Plugin Dependencies Report

Griffon 1.3.0 includes a new command (@plugin-dependencies-report@) that displays a dependencies graph of all installed plugins. Plugin dependencies use the following prefix characters to identify their state

 * @.@ the artifact is installed
 * @+@ the artifact will be installed
 * @-@ the artifact will be removed or was evicted in favor of a more recent version
 * @?@ the artifact could not be resolved
 * @!@ the artifact has conflicting versions

For example given the following plugins definitions in @application.properties@

{code}
plugins.glazedlists=2.0.0
plugins.lookandfeel=1.0.0
plugins.miglayout=1.0.0
plugins.swing=1.3.0
{code}

The generated report would be

!plugin-dependencies-report.png!

h4. Dependency Graph Report

As part of running the @dependency-report@ command Griffon will now display a Gradle inspired dependency graph for all configurations. Below is a screenshot of the runtime dependencies of and application that relies on @lookandfeel@, @miglayout@, @glazedlists@ and @swing@ plugins.

!dependency-report-graph.png!
