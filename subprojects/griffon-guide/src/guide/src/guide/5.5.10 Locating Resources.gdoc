Resources can be loaded form the classpath using the standard mechanism provided by the Java runtime, that is, ask a @ClassLoader@ instance to load a resource @URL@ or obtain an @InputStream@ that points to the resource.

But the code can get quite verbose, take for example the following view code that locates a text file and displays it on a text component

{code}
scrollPane {
    textArea(columns: 40, rows: 20,
        text: this.class.classLoader.getResource('someTextFile.txt').text)
}
{code}

In order to reduce visual clutter, also to provide an abstraction over resource location, both @[GriffonApplication|api:griffon.core.GriffonApplication]@ and @[GriffonArtifact|api:griffon.core.GriffonArtifact]@ have a new pair of methods that simply working with resources. Those methods are provided by @[ResourceHandler|api:griffon.core.ResourceHandler]@:

 * @URL getResourceAsURL(String resourceName)@
 * @InputStream getResourceAsStream(String resourceName)@

Thus, the previous example can be rewritten this way

{code}
scrollPane {
    textArea(columns: 40, rows: 20,
        text: getResourceAsURL('someTextFile.txt').text)
}
{code}

In the future Griffon may switch to a modularized runtime, this abstraction will shield you from any problems when the underlying mechanism changes.