There are several components in a Griffon application that perform specific chores and tasks, they are usually know as managers. Some of them are the @[MVCGroupManager|guide:mvcGroupManager]@, @[ArtifactManager|guide:evaluatingConventions]@ and @[AddonManager|guide:evaluatingConventions]@ for example. All of these helper components are instantiated using default implementations chosen by the Griffon runtime, however developers may specify custom implementations, and in some cases, disable them altogether.

The following paragraphs enumerate the different managers and helpers that may be configured at booting time. Configuration is performed by adding the appropriate flag and value to @Config.groovy@.

h4. EventRouter

Discussed in: [Application Events|guide:applicationEvents].

Responsibility: publish events.

Configuration flag: @app.eventRouter.factory@

Type: @[griffon.core.factories.EventRouterFactory|api:griffon.core.factories.EventRouterFactory]@

Default implementation: @org.codehaus.griffon.runtime.core.factories.DefaultEventRouterFactory@

h4. ArtifactManager

Discussed in: [Artifact API|guide:artifactApi].

Responsibility: keep track of @GriffonArtifactClass@ and @GriffonArtifact@ instances.

Configuration flag: @app.artifactManager.factory@

Type: @[griffon.core.factories.ArtifactManagerFactory|api:griffon.core.factories.ArtifactManagerFactory]@

Default implementation: @org.codehaus.griffon.runtime.core.factories.DefaultArtifactManagerFactory@

h4. AddonManager

Discussed in: [Artifact API|guide:artifactApi].

Responsibility: keep track of registered @GriffonAddon@ instances.

Configuration flag: @app.addonManager.factory@

Type: @[griffon.core.factories.AddonManagerFactory|api:griffon.core.factories.AddonManagerFactory]@

Default implementation: @org.codehaus.griffon.runtime.core.factories.DefaultAddonManagerFactory@

h4. MVCGroupManager

Discussed in: [MVCGroupManager|guide:mvcGroupManager].

Responsibility: create and destroy @MVCGroup@ instances.

Configuration flag: @app.mvcGroupManager.factory@

Type: @[griffon.core.factories.MVCGroupManagerFactory|api:griffon.core.factories.MVCGroupManagerFactory]@

Default implementation: @org.codehaus.griffon.runtime.core.factories.DefaultMVCGroupManagerFactory@

h4. MessageSource

Discussed in: [The Messsage Source|guide:messageSource].

Responsibility: resolving internationalizable messages.

Configuration flag: @app.messageSource.factory@

Type: @[griffon.core.factories.MessageSourceFactory|api:griffon.core.factories.MessageSourceFactory]@

Default implementation: @org.codehaus.griffon.runtime.core.factories.DefaultMessageSourceFactory@

h4. ResourceResolver

Discussed in: [Resolving Configured Resources|guide:resourceResolver].

Responsibility: resolving resources.

Configuration flag: @app.resourceResolver.factory@

Type: @[griffon.core.factories.ResourceResolverFactory|api:griffon.core.factories.ResourceResolverFactory]@

Default implementation: @org.codehaus.griffon.runtime.core.factories.DefaultResourceResolverFactory@

h4. ResourcesInjector

Discussed in: [Automatically Injected Resources|guide:injectedResources].

Responsibility: injecting configured resources into freshly instantiated objects.

Configuration flag: @app.resourceInjector.factory@

Type: @[griffon.core.factories.ResourcesInjectorFactory|api:griffon.core.factories.ResourcesInjectorFactory]@

Default implementation: @org.codehaus.griffon.runtime.core.factories.DefaultResourcesInjectorFactory@

h4. GriffonControllerActionManager

Discussed in: [The Action Manager|guide:actionManager].

Responsibility: instantiate View friendly controller actions.

Configuration flag: @app.actionManager.factory@

Disabling flag: @griffon.action.manager.disable@

Type: @[griffon.core.factories.GriffonControllerActionManagerFactory|api:griffon.core.factories.GriffonControllerActionManagerFactory]@

Default implementation: UI toolkit specific
