/*
 * Copyright 2008-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/aalmiray/asciidoctor' }
        maven { url 'http://dl.bintray.com/content/bmuschko/maven' }
        maven { url 'http://dl.bintray.com/content/bmuschko/gradle-plugins' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'
        classpath 'org.gradle.api.plugins:gradle-java2html-plugin:0.4'
    }
}

apply plugin: 'asciidoctor'
apply plugin: 'java2html'

ext.childProjects = [
    ':griffon-core-compile',
    ':griffon-core-test',
    ':griffon-groovy-compile',
    ':griffon-groovy',
    ':griffon-swing',
    ':griffon-javafx',
    ':griffon-lanterna',
    ':griffon-pivot',
    ':griffon-core'
]

ext.childProjects.each { evaluationDependsOn it }

dependencies {
    java2html 'de.java2html:java2html:5.0'
}

task copyDocs(type: Copy) {
    destinationDir = "${buildDir}/sources" as File
    project.ext.childProjects.each { projectName ->
        if (projectName.endsWith('-compile')) {
            from(project(projectName).sourceSets.main.allSource) {
                include 'griffon/transform/**/*'
                include 'griffon/metadata/**/*'
            }
        } else {
            from(project(projectName).sourceSets.main.allSource)
        }
    }
}

evaluationDependsOn(":console-swing-groovy")

task apiDocs(type: Javadoc, dependsOn: copyDocs) {
    source          = file("${buildDir}/sources")
    destinationDir  = file("$buildDir/api")
    title           = "Griffon $version"
    classpath       = project.ext.childProjects.collect { projectName ->
                          [project(projectName).sourceSets.main.output,
                           project(projectName).configurations.compile,
                           project(projectName).configurations.compileOnly]
                      }.flatten().sum() as FileCollection

    excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

    options.use         = true
    options.splitIndex  = true
    options.encoding    = 'UTF-8'
    options.author      = true
    options.version     = true
    options.source      = project.sourceCompatibility
    options.overview    = file('src/javadoc/overview.html')
    options.windowTitle = "Griffon $version"
    options.docTitle    = "Griffon $version"
    options.footer      = project.javadocFooter
    options.links       = ['http://www.slf4j.org/apidocs/',
                           'http://jsr-305.googlecode.com/svn/trunk/javadoc/',
                           'http://docs.oracle.com/javase/7/docs/api/']

    doLast { task ->
        copy {
            into task.destinationDir
            from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                 rootProject.file('src/javadoc/resources/css/stylesheet.css')
        }
        copy {
            into file("${task.destinationDir}/resources")
            from rootProject.file('src/javadoc/resources/img/')
        }
        copy {
            into file("${task.destinationDir}/images/")
            from rootProject.file('src/media/banners/medium.png')
            rename '.*', 'griffon-banner-medium.png'
        }
    }
}

task java2html {
    dependsOn apiDocs
    dependsOn "java2htmlGenerateOverview"
    dependsOn java2htmlConvertCode
}

task jarApi(type: Jar, dependsOn: apiDocs) {
    archiveName    = "griffon-core-${project.version}-javadoc.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from "$buildDir/api"
}

task jarSourceHtml(type: Jar, dependsOn: java2html) {
    archiveName    = "griffon-core-${project.version}-sources-html.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from "$buildDir/java2html"
}

task jarDocs(dependsOn: [jarApi, jarSourceHtml]) { }

java2html {
    conversion {
        srcDirs = files("${buildDir}/sources")
        destDir = file("${buildDir}/java2html")
        tabs = 4
        style = 'eclipse'
        outputFormat = 'html'
        showLineNumbers = true
        addLineAnchors = true
        showFileName = true
        useShortFileName = true
        overwrite = true
        showDefaultTitle = true
        includeDocumentHeader = true
        includeDocumentFooter = true
    }

    overview {
        srcDirs = files("${buildDir}/java2html")
        destDir = file("${buildDir}/java2html")
        windowTitle = "Griffon $version"
        docTitle = "Griffon $version"
        docDescription = """Griffon is a Grails like application framework for developing desktop
                            applications in Groovy. Inspired by Grails, Griffon follows the Convention over
                            Configuration paradigm, paired with an intuitive MVC architecture and a command
                            line interface."""
        icon = rootProject.file('src/javadoc/resources/img/griffon.ico')
        stylesheet = rootProject.file('src/javadoc/resources/css/stylesheet.css')
    }
}

task computeConsoleDependencies << {
    List provided = project(':console-swing-groovy').configurations.compileOnly.collect { it.name }.sort()
    List compile = project(':console-swing-groovy').configurations.compile.collect { it.name }.sort()
    provided -= compile
    List runtime = project(':console-swing-groovy').configurations.runtime.collect { it.name }.sort()
    runtime -= compile
    List testCompile = project(':console-swing-groovy').configurations.testCompile.collect { it.name }.sort()
    List test = testCompile - compile
    List build = compile.grep { it =~ /groovy-all/ }

    def writeFile = { String name, List contents ->
        File file = new File("${buildDir}/generated-dependencies/${name}.adoc")
        file.parentFile.mkdirs()
        file.withPrintWriter { w ->
            contents.each { dep -> w.println(" - $dep") }
        }
    }

    writeFile('build', build)
    writeFile('provided', provided)
    writeFile('compile', compile)
    writeFile('runtime', runtime)
    writeFile('test', test)
}

asciidoctor {
    dependsOn computeConsoleDependencies
    baseDir = project.file('src/asciidoc')
    sourceDocumentName = project.file('src/asciidoc/index.adoc')
    options = [
        attributes: [
            toc                 : 'left',
            doctype             : 'book',
            icons               : 'font',
            sectlink            : true,
            sectanchors         : true,
            numbered            : true,
            linkattrs           : true,
            imagesdir           : 'images',
            'source-highlighter': 'coderay',
            'griffon-version'   : project.version,
            'griffon-group'     : project.group,
            'griffon-source-url': griffonSourceUrl
        ]
    ]

    doLast { task ->
        copy {
            into file("${task.outputDir}/images/")
            from rootProject.file('src/media/banners/large.png')
            rename '.*', 'griffon-banner-large.png'
        }
    }
}
