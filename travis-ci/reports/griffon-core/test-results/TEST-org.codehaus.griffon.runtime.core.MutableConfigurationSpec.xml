<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" tests="70" skipped="0" failures="0" errors="0" timestamp="2015-08-11T07:55:12" hostname="testing-worker-linux-da6418d7-2-20031-linux-2-75048457" time="0.159">
  <properties/>
  <testcase name="Calling configuration.set(key.string, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.061"/>
  <testcase name="Calling configuration.set(key.boolean.type, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.boolean.string, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.int.type, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.int.string, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.long.type, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.long.string, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.float.type, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.float.string, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.double.type, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.double.string, foo) stores foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.string, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.005"/>
  <testcase name="Calling configuration.set(key.boolean.type, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Calling configuration.set(key.boolean.string, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.int.type, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Calling configuration.set(key.int.string, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.long.type, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.long.string, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Calling configuration.set(key.float.type, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.float.string, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.double.type, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.set(key.double.string, foo) stores foo (recall with getAsString)" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.string) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.002"/>
  <testcase name="Calling configuration.remove(key.boolean.type) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Calling configuration.remove(key.boolean.string) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.int.type) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.int.string) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.long.type) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.long.string) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.float.type) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.float.string) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.double.type) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.006"/>
  <testcase name="Calling configuration.remove(key.double.string) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Calling configuration.remove(key.foo) removes the key" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.009"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.boolean.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.boolean.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.int.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.int.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.long.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.long.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.float.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.float.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.double.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.double.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into flat Map and retrieving key key.foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.002"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.boolean.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.boolean.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.int.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.int.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.long.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.long.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.float.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.float.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.double.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.double.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into Properties and retrieving key key.foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.004"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.boolean.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.boolean.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.int.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.int.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.long.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.long.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.0"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.float.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.float.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.double.type" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.double.string" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <testcase name="Transforming configuration into ResourceBundle and retrieving key key.foo" classname="org.codehaus.griffon.runtime.core.MutableConfigurationSpec" time="0.001"/>
  <system-out><![CDATA[[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[map, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
[props, [key.boolean.string:true, key.boolean.type:true, key.double.string:6.2832, key.double.type:3.1416, key.float.string:6.2832, key.float.type:3.1416, key.int.string:21, key.int.type:42, key.long.string:32, key.long.type:64, key.string:string, key.foo:foo]]
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
